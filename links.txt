* https://github.com/vshymanskyy/awesome-wasm-tools

* https://github.com/bytecodealliance/wit-bindgen/
  bindings generator based on the interface types (or component model?) extension,
  for C and Rust (and JS?)

* https://lucumr.pocoo.org/2020/11/30/how-to-wasm-dwarf/
  WASM, DWARF, debugging

* https://radu-matei.com/blog/intro-wasm-components/
  Component Model example

* wasmlink: static linker for component model

* https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md
  C ABI used by clang

* https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md
  static linking

* https://kripken.github.io/blog/wasm/2019/07/16/asyncify.html
  blog post explaining asyncify

* https://schellcode.github.io/webassembly-without-emscripten
  WebAssembly without emscripten


* https://github.com/emscripten-core/emscripten/blob/main/src/settings.js
  emscripten settings such as -sMODULARIZE -sMAIN_MODULE, etc.

* https://github.com/bytecodealliance/wizer
  pre-initialize a WASM binary (precompute and save static data, could be
  useful to preinitialize the python startup)


* https://jott.live/markdown/wasm_binary_size
  https://github.com/bwasti/web_assembly_experiments/tree/main/lazy_load
  Split WASM binary into smaller pieces


* https://jott.live/markdown/js_gc_in_wasm
  JavaScript Garbage Collection with WebAssembly is Possible Today



pyodide startup/size: https://github.com/pyodide/pyodide/issues/646


* https://aransentin.github.io/cwasm/
  Notes on working with C and WebAssembly


cowasm dynamic linker, lots of interesting links inside
    https://www.npmjs.com/package/dylink


WASI playground
    https://runno.dev/articles/ffmpeg

component model:
    https://www.fermyon.com/blog/webassembly-component-model


* https://surma.dev/things/rust-to-webassembly/
  Rust to WebAssembly, with lots of low-level details and how to use various
  tools (llvm-objdump, wasm-objdump, twiggy, etc)

* https://rustwasm.github.io/twiggy/
  A code size profiler for Wasm
